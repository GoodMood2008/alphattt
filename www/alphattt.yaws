<erl module=alphattt_mod>

-compile(export_all).

out(A) ->
    Pid = web_agent_mgr:get_agent(A),
    yaws_rpc:handler_session(A#arg{state = {web_agent, Pid}}, {?MODULE, handle}).

handle({web_agent, Pid}, {call, get_state, _Arg}, Session) ->
	Response = web_agent:get_state(Pid), 
    {true, 0, Session, {response, Response}};

handle({web_agent, Pid}, {call, set_move, {array, [R, C, R1, C1]}}, Session) ->	
	Move = {R, C, R1, C1},
	io:format("Webplayer Move ~p~n", [Move]),
	ok = web_agent:set_move(Pid, Move),	
    {true, 0, Session, {response, "ok"}};

handle({web_agent, Pid}, {call, play_vs_robot, _Value}, Session) ->
	ok = web_agent:play_vs_robot(Pid, "mcts", mcts),
    {true, 0, Session, {response, "ok"}};

handle({web_agent, Pid}, {call, play_vs_human, _Value}, Session) ->
	ok = web_agent:play_vs_human(Pid),
    {true, 0, Session, {response, "ok"}};

handle({web_agent, Pid}, {call, Func, _Args}, Session) ->
    io:format("alphattt unknown func call ~p, web_agent ~p~n", [Func, Pid]),
    {true, 0, Session, {response, "ok"}}.  
	
</erl>
